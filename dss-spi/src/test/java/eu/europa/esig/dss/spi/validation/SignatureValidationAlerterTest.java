/**
 * DSS - Digital Signature Services
 * Copyright (C) 2015 European Commission, provided under the CEF programme
 * <p>
 * This file is part of the "DSS - Digital Signature Services" project.
 * <p>
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * <p>
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * <p>
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
package eu.europa.esig.dss.spi.validation;

import eu.europa.esig.dss.alert.ExceptionOnStatusAlert;
import eu.europa.esig.dss.alert.SilentOnStatusAlert;
import eu.europa.esig.dss.alert.exception.AlertException;
import eu.europa.esig.dss.enumerations.TimestampType;
import eu.europa.esig.dss.model.InMemoryDocument;
import eu.europa.esig.dss.model.x509.CertificateToken;
import eu.europa.esig.dss.spi.DSSUtils;
import eu.europa.esig.dss.spi.SignatureCertificateSource;
import eu.europa.esig.dss.spi.signature.AdvancedSignature;
import eu.europa.esig.dss.spi.x509.revocation.crl.ExternalResourcesCRLSource;
import eu.europa.esig.dss.spi.x509.revocation.crl.OfflineCRLSource;
import eu.europa.esig.dss.spi.x509.revocation.ocsp.ExternalResourcesOCSPSource;
import eu.europa.esig.dss.spi.x509.revocation.ocsp.OfflineOCSPSource;
import eu.europa.esig.dss.spi.x509.tsp.TimestampToken;
import eu.europa.esig.dss.utils.Utils;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.Calendar;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.clearInvocations;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

class SignatureValidationAlerterTest {

    @Test
    void assertAllRequiredRevocationDataPresentTest() {
        String crlB64 = "MIIBbTBXMA0GCSqGSIb3DQEBBQUAMCgxCzAJBgNVBAYTAkJFMRkwFwYDVQQDExBCZWxnaXVtIFJvb3QgQ0EyFw0xNDA3MDExMTAwMDBaFw0xNTAxMzExMTAwMDBaMA0GCSqGSIb3DQEBBQUAA4IBAQClCqf+EHb/ZafCIrRXdEmIOrHV0fFYfIbLEWUhMLIDBdNgcDeKjUOB6dc3WnxfyuE4RzndBbZA1dlDv7wEX8sxaGzAdER166uDS/CF7wwVz8voDq+ju5xopN01Vy7FNcCA43IpnZal9HPIQfb2EyrfNu5hQal7WiKE7q8PSch1vBlB9h8NbyIfnyPiHZ7A0B6MPJBqSCFwgGm+YZB/4DQssOVui0+kBT19uUBjTG0QEe7dLxZTBEgBowq5axv93QBXe0j+xOXZ97tlU2iJ51bsLY3E134ziMV6hKPsBw6ARMq/BF64P6axLIUOqdCRaYoMu2ekfYSoFuaM3l2o79aw";

        String certToValidateB64 = "MIIEBTCCAu2gAwIBAgILBAAAAAABQeUqkm4wDQYJKoZIhvcNAQEFBQAwKDELMAkGA1UEBhMCQkUxGTAXBgNVBAMTEEJlbGdpdW0gUm9vdCBDQTIwHhcNMTMxMDIzMTEwMDAwWhcNMTkwMTIzMTEwMDAwWjBjMQswCQYDVQQGEwJCRTENMAsGA1UEBRMEMjAxNDEjMCEGA1UEChMaQmVsZ2l1bSBGZWRlcmFsIEdvdmVybm1lbnQxIDAeBgNVBAMTF1RpbWUgU3RhbXBpbmcgQXV0aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuurzcUZ9xj0Hxj8pzLPSdodxbl9hTzmvVFjVwkPlO/CKItuMv5jdX78vkJyxDoCIzlaydC8iX6LKVvbKWS8DHU4Q9vUg9jlyPrG3pM8/7uMKEiVJlo1Q7G/j3ycVIfKW5JgLEUkkA7prtjxumaUaNtoSoLXVbHU+4qIVLuBOq7dYwZN0oftYM6cUEslqDi8OSAZVyPYvUNI7klcQRh28duuMyUXhOzu4neBz49uSA5c3nAIHJxJH+zsIEIZ/rv2+oiFsN3NRy8mu8sHwOR1bf81SP73C6Gsgx0cjb4JaEvAdEXayOx5YjIkp8p9rF0sMHbimYy6Xhg6uAzObjFrQtwIDAQABo4H0MIHxMA4GA1UdDwEB/wQEAwIGwDAWBgNVHSUBAf8EDDAKBggrBgEFBQcDCDBDBgNVHSAEPDA6MDgGBmA4CQEBBTAuMCwGCCsGAQUFBwIBFiBodHRwOi8vcmVwb3NpdG9yeS5wa2kuYmVsZ2l1bS5iZTAdBgNVHQ4EFgQUhy+xl8l/bUtfYofrFHxPI0hLRJIwNwYDVR0fBDAwLjAsoCqgKIYmaHR0cDovL2NybC5wa2kuYmVsZ2l1bS5iZS9iZWxnaXVtMi5jcmwwCQYDVR0TBAIwADAfBgNVHSMEGDAWgBSFiuv0xbu+DlkDlN7WgAEV4xCcOTANBgkqhkiG9w0BAQUFAAOCAQEAKtng/BMJwJ4moDPdh0wJbMcDupg7Cr3PboLqNiVtJHtojtgya5+LDfIpDaBt054es/OKV3fNd40LU1eNBj0flU0SNgxwRqqWwBjdpBj9XCZsLsTlCjLDG7HJq6toyAfXYjHBj3KldUQS2g4wf3nxeQgDbLTs28MhpJWN9FCk2DJ63aPEbAZ/HA20NPAb86KM/LhO2AlkDwhpP510ih1dBWjiwNRrkrmxInW+PCQmBGR60rqRs5f8naosyR8URDz/wHiQ4Arn/HrX/KVZ2HMD8pt1IZY+5LuIuA2fn0hNCQyrGZoa3HNqIIP5zfavw0Tp+jDKLNNSsi5L8CP128lkug==";
        String caCertB64 = "MIIDjjCCAnagAwIBAgIIKv++n6Lw6YcwDQYJKoZIhvcNAQEFBQAwKDELMAkGA1UEBhMCQkUxGTAXBgNVBAMTEEJlbGdpdW0gUm9vdCBDQTIwHhcNMDcxMDA0MTAwMDAwWhcNMjExMjE1MDgwMDAwWjAoMQswCQYDVQQGEwJCRTEZMBcGA1UEAxMQQmVsZ2l1bSBSb290IENBMjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMZzQh6S/3UPi790hqc/7bIYLS2X+an7mEoj39WN4IzGMhwWLQdC1i22bi+n9fzGhYJdld61IgDMqFNAn68KNaJ6x+HK92AQZw6nUHMXU5WfIp8MXW+2QbyM69odRr2nlL/zGsvU+40OHjPIltfsjFPekx40HopQcSZYtF3CiInaYNKJIT/e1wEYNm7hLHADBGXvmAYrXR5i3FVr/mZkIV/4L+HXmymvb82fqgxG0YjFnaKVn6w/Fa7yYd/vw2uaItgscf1YHewApDgglVrH1Tdjuk+bqv5WRi5j2Qsj1Yr6tSPwiRuhFA0m2kHwOI8w7QUmecFLTqG4flVSOmlGhHUCAwEAAaOBuzCBuDAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zBCBgNVHSAEOzA5MDcGBWA4CQEBMC4wLAYIKwYBBQUHAgEWIGh0dHA6Ly9yZXBvc2l0b3J5LmVpZC5iZWxnaXVtLmJlMB0GA1UdDgQWBBSFiuv0xbu+DlkDlN7WgAEV4xCcOTARBglghkgBhvhCAQEEBAMCAAcwHwYDVR0jBBgwFoAUhYrr9MW7vg5ZA5Te1oABFeMQnDkwDQYJKoZIhvcNAQEFBQADggEBAFHYhd27V2/MoGy1oyCcUwnzSgEMdL8rs5qauhjyC4isHLMzr87lEwEnkoRYmhC598wUkmt0FoqW6FHvv/pKJaeJtmMrXZRY0c8RcrYeuTlBFk0pvDVTC9rejg7NqZV3JcqUWumyaa7YwBO+mPyWnIR/VRPmPIfjvCCkpDZoa01gZhz5v6yAlGYuuUGK02XThIAC71AdXkbc98m6tTR8KvPG2F9fVJ3bTc0R5/0UAoNmXsimABKgX77OFP67H6dh96tK8QYUn8pJQsKpvO2FsauBQeYNxUJpU4c5nUwfAA4+Bw11V0SoU7Q2dmSZ3G7rPUZuFF1eR1ONeE3gJ7uOhXY=";

        CertificateVerifier certificateVerifier = new CommonCertificateVerifier();

        SignatureValidationContext validationContext = spy(new SignatureValidationContext());
        validationContext.initialize(certificateVerifier);

        validationContext.addCertificateTokenForVerification(DSSUtils.loadCertificateFromBase64EncodedString(certToValidateB64));
        validationContext.addCertificateTokenForVerification(DSSUtils.loadCertificateFromBase64EncodedString(caCertB64));
        validationContext.validate();

        SignatureValidationAlerter validationAlerter = new SignatureValidationAlerter(validationContext);

        certificateVerifier.setAlertOnMissingRevocationData(new ExceptionOnStatusAlert());
        Exception exception = assertThrows(AlertException.class, validationAlerter::assertAllRequiredRevocationDataPresent);
        assertTrue(exception.getMessage().contains("Revocation data is missing for one or more certificate(s)."));
        verify(validationContext, times(1)).allRequiredRevocationDataPresent();

        clearInvocations(validationContext);

        certificateVerifier.setAlertOnMissingRevocationData(new SilentOnStatusAlert());
        validationAlerter.assertAllRequiredRevocationDataPresent();
        verify(validationContext, times(1)).allRequiredRevocationDataPresent();

        clearInvocations(validationContext);

        certificateVerifier.setAlertOnMissingRevocationData(null);
        validationAlerter.assertAllRequiredRevocationDataPresent();
        verify(validationContext, times(0)).allRequiredRevocationDataPresent();

        validationContext = spy(new SignatureValidationContext());
        validationContext.initialize(certificateVerifier);

        validationContext.addCertificateTokenForVerification(DSSUtils.loadCertificateFromBase64EncodedString(certToValidateB64));
        validationContext.addCertificateTokenForVerification(DSSUtils.loadCertificateFromBase64EncodedString(caCertB64));

        OfflineCRLSource crlSource = new ExternalResourcesCRLSource(new InMemoryDocument(Utils.fromBase64(crlB64)));
        validationContext.addDocumentCRLSource(crlSource);
        validationContext.validate();

        validationAlerter = new SignatureValidationAlerter(validationContext);

        certificateVerifier.setAlertOnMissingRevocationData(new ExceptionOnStatusAlert());
        validationAlerter.assertAllRequiredRevocationDataPresent();
        verify(validationContext, times(1)).allRequiredRevocationDataPresent();

        clearInvocations(validationContext);

        certificateVerifier.setAlertOnMissingRevocationData(new SilentOnStatusAlert());
        validationAlerter.assertAllRequiredRevocationDataPresent();
        verify(validationContext, times(1)).allRequiredRevocationDataPresent();

        clearInvocations(validationContext);

        certificateVerifier.setAlertOnMissingRevocationData(null);
        validationAlerter.assertAllRequiredRevocationDataPresent();
        verify(validationContext, times(0)).allRequiredRevocationDataPresent();
    }

    @Test
    void assertAllPOECoveredByRevocationDataTest() throws Exception {
        String tstB64 = "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";
        String crlB64Old = "MIICXTCBxgIBATANBgkqhkiG9w0BAQsFADBNMRAwDgYDVQQDDAdyb290LWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUXDTI0MTEyMTE1NDY0MloXDTI1MDUyMTE1NDY0MlowRTAhAgIB9xcNMjQwMzExMDkzMDEyWjAMMAoGA1UdFQQDCgEBMCACAQYXDTI0MDMxMTA5MzAxMlowDDAKBgNVHRUEAwoBATANBgkqhkiG9w0BAQsFAAOCAYEAdeWMbnGK9mudE8bVjdRI1QJDInJenSyuYsikazZN8IEv8Ll3q/AMTCl+cRRBR6n6fjYh4LaJUCGF4l/ikDKyNgf8AMS+xqdiV2ZzYlWFQndXK1QYAdm/LC5O02VPGa6mk6Jox2epklzd3NVmmms/gBQ4bU2Q3OHELP1BrevziWQnqhyxnWmA5TXFknQtvQVDKdtHCGfI1qdMVclRsWDaFbSBwvcnE5WgKyDPX6NFP5sTXxCCBb/kiu6EX9OlNOAw2J/YkO1IjkZUZfnmKIgVMuSsbXLZ1oAdbtMl8PG/pYWHE6wKBj7S9K5nQIFIE/HYr5s6/4pqcQpTytyWzvWDFITKR94z+03fE5IRniauXKZXKHScfJ+KgQuioRkT3Y/H/1ifgPwaCR60X+DhDplO4B1WC6qlu4YiZTpkQJY35qbphl4k1WFhtDma/tqL8iC9tUK3cOXqt+8mL88+9faMhAaVPczCIrqsn+Id4fA0WNhci4DADz8q1YKJyxAhliRd";
        String crlB64New = "MIICXTCBxgIBATANBgkqhkiG9w0BAQsFADBNMRAwDgYDVQQDDAdyb290LWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUXDTI0MTIxMzEwMDEwNVoXDTI1MDYxMzEwMDEwNVowRTAhAgIB9xcNMjQwMzExMDkzMDEyWjAMMAoGA1UdFQQDCgEBMCACAQYXDTI0MDMxMTA5MzAxMlowDDAKBgNVHRUEAwoBATANBgkqhkiG9w0BAQsFAAOCAYEASa/Z4GZIcinBhyK4BKgAwL1pH4X0r0ntjJLkbgdFStjeLx95qOLch3fHaN4my3bRhu/EU9NL/0CwiWNwIYllGT5Siz2KAevDbbLj+EqORot9TowjHKbvIsYmQY7FgRDxbWwYju/qHR0hEnQAW4X+CWak2vrjF3h9PMJIRKtkXi8AW9frlu1pc+M0PDALS6G+o2CjE5LBt2Wbw+udrZIfYGZKd7g7xz0X+nETAqGxgA8ocHIsYz1g1noFm3SSqThwsaB2xbk6QSYSRtffMu/rA2bLKfb74yIZy5gid228BCBv+XXrDZcQtVYCiZoEFew16PaE0dd3+a4qR3GVrSgtAsP/dSbxQrTJlwt7zrW/2TNIgxJ7ngMJVneIgOXqh9TCOzt2x5UxRzeZBDz9IS3S9SIdJYCTzXJHhPYxYSYpKG5lSat+gae4syoPLkyzGPv2YygTDAQXWNy5XSwSPjHsoNhS3YFGBcXaSoY0ef7cJpONJAP+H3L9Lynt5p8imUwh";

        CertificateVerifier certificateVerifier = new CommonCertificateVerifier();
        SignatureValidationContext validationContext = spy(new SignatureValidationContext());
        validationContext.initialize(certificateVerifier);

        validationContext.addTimestampTokenForVerification(new TimestampToken(Utils.fromBase64(tstB64), TimestampType.CONTENT_TIMESTAMP));

        OfflineCRLSource crlSource = new ExternalResourcesCRLSource(new InMemoryDocument(Utils.fromBase64(crlB64Old)));
        validationContext.addDocumentCRLSource(crlSource);
        validationContext.validate();

        SignatureValidationAlerter validationAlerter = new SignatureValidationAlerter(validationContext);

        certificateVerifier.setAlertOnUncoveredPOE(new ExceptionOnStatusAlert());
        Exception exception = assertThrows(AlertException.class, validationAlerter::assertAllPOECoveredByRevocationData);
        assertTrue(exception.getMessage().contains("Revocation data is missing for one or more POE(s)."));
        verify(validationContext, times(1)).allPOECoveredByRevocationData();

        clearInvocations(validationContext);

        certificateVerifier.setAlertOnUncoveredPOE(new SilentOnStatusAlert());
        validationAlerter.assertAllPOECoveredByRevocationData();
        verify(validationContext, times(1)).allPOECoveredByRevocationData();

        clearInvocations(validationContext);

        certificateVerifier.setAlertOnUncoveredPOE(null);
        validationAlerter.assertAllPOECoveredByRevocationData();
        verify(validationContext, times(0)).allPOECoveredByRevocationData();

        validationContext = spy(new SignatureValidationContext());
        validationContext.initialize(certificateVerifier);

        validationContext.addTimestampTokenForVerification(new TimestampToken(Utils.fromBase64(tstB64), TimestampType.CONTENT_TIMESTAMP));

        crlSource = new ExternalResourcesCRLSource(new InMemoryDocument(Utils.fromBase64(crlB64New)));
        validationContext.addDocumentCRLSource(crlSource);
        validationContext.validate();

        validationAlerter = new SignatureValidationAlerter(validationContext);

        certificateVerifier.setAlertOnUncoveredPOE(new ExceptionOnStatusAlert());
        validationAlerter.assertAllPOECoveredByRevocationData();
        verify(validationContext, times(1)).allPOECoveredByRevocationData();

        clearInvocations(validationContext);

        certificateVerifier.setAlertOnUncoveredPOE(new SilentOnStatusAlert());
        validationAlerter.assertAllPOECoveredByRevocationData();
        verify(validationContext, times(1)).allPOECoveredByRevocationData();

        clearInvocations(validationContext);

        certificateVerifier.setAlertOnUncoveredPOE(null);
        validationAlerter.assertAllPOECoveredByRevocationData();
        verify(validationContext, times(0)).allPOECoveredByRevocationData();
    }

    @Test
    void assertAllTimestampsValidTest() throws Exception {
        String tstB64 = "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";

        CertificateVerifier certificateVerifier = new CommonCertificateVerifier();
        SignatureValidationContext validationContext = spy(new SignatureValidationContext());
        validationContext.initialize(certificateVerifier);

        TimestampToken timestampToken = new TimestampToken(Utils.fromBase64(tstB64), TimestampType.CONTENT_TIMESTAMP);
        validationContext.addTimestampTokenForVerification(timestampToken);

        validationContext.validate();

        SignatureValidationAlerter validationAlerter = new SignatureValidationAlerter(validationContext);

        certificateVerifier.setAlertOnInvalidTimestamp(new ExceptionOnStatusAlert());
        Exception exception = assertThrows(AlertException.class, validationAlerter::assertAllTimestampsValid);
        assertTrue(exception.getMessage().contains("Broken timestamp(s) detected."));
        verify(validationContext, times(1)).allTimestampsValid();

        clearInvocations(validationContext);

        certificateVerifier.setAlertOnInvalidTimestamp(new SilentOnStatusAlert());
        validationAlerter.assertAllTimestampsValid();
        verify(validationContext, times(1)).allTimestampsValid();

        clearInvocations(validationContext);

        certificateVerifier.setAlertOnInvalidTimestamp(null);
        validationAlerter.assertAllTimestampsValid();
        verify(validationContext, times(0)).allTimestampsValid();

        validationContext = spy(new SignatureValidationContext());
        validationContext.initialize(certificateVerifier);

        timestampToken.matchData(new InMemoryDocument("Hello world".getBytes()));
        validationContext.addTimestampTokenForVerification(timestampToken);

        validationContext.validate();

        validationAlerter = new SignatureValidationAlerter(validationContext);

        certificateVerifier.setAlertOnInvalidTimestamp(new ExceptionOnStatusAlert());
        validationAlerter.assertAllTimestampsValid();
        verify(validationContext, times(1)).allTimestampsValid();

        clearInvocations(validationContext);

        certificateVerifier.setAlertOnInvalidTimestamp(new SilentOnStatusAlert());
        validationAlerter.assertAllTimestampsValid();
        verify(validationContext, times(1)).allTimestampsValid();

        clearInvocations(validationContext);

        certificateVerifier.setAlertOnInvalidTimestamp(null);
        validationAlerter.assertAllTimestampsValid();
        verify(validationContext, times(0)).allTimestampsValid();
    }

    @Test
    void assertCertificateNotRevokedTest() {
        String caCertB64 = "MIIE6jCCA1KgAwIBAgIBBDANBgkqhkiG9w0BAQ0FADBNMRAwDgYDVQQDDAdyb290LWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwHhcNMjMwNTExMDkzMDEyWhcNMjUwMzExMDkzMDEyWjBNMRAwDgYDVQQDDAdnb29kLWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwggGiMA0GCSqGSIb3DQEBAQUAA4IBjwAwggGKAoIBgQC1PUSrajqIL0II//nqAcWTtRUSf8sty531NCHgna+ZuZsXO0DR0vEHsZyMBvASOSZPJQHJ0mmWBHc5TcWxRlAFBwOx4J7X9QXdkaNGwzJxsHCG3VKcCY3MroaJKCJMJmlIWKBhBK4cTFeAhkJxoBZXPl4At1MIOPgVU8mTzM8BCT1A6EPz2P3FqduP4tZ5m3yBb5ARailHqKd1Pt4nvhw8ojTZPrVXfpLYzb2Ca/WqpF1acsLTXwSvXedN5H3AwFLIw8KNNf+sv+y7Izrd6+d6BEysaNX2pe2PH7h++U2cTuXJwuOkbtQ9QftSX0vj71hzGkF7eUeSIya4Ych3/KQDds1wjVusfwvoQFjdBK1Kjr/w131hLREaNXR2jmT7dP2+/AYOFe3otGqsZ0vVSpJC/FBSQFg3uslg+r3cllfHVVqnC0uJUz3Db37hhAwTyflqqh00eVUqOZmKgwLtRKEJdHLW35A8v7X2xrNwJTM9CmtJgIBUidOIIcM08KnqJgkCAwEAAaOB1DCB0TAOBgNVHQ8BAf8EBAMCAQYwQQYDVR0fBDowODA2oDSgMoYwaHR0cDovL2Rzcy5ub3dpbmEubHUvcGtpLWZhY3RvcnkvY3JsL3Jvb3QtY2EuY3JsMEwGCCsGAQUFBwEBBEAwPjA8BggrBgEFBQcwAoYwaHR0cDovL2Rzcy5ub3dpbmEubHUvcGtpLWZhY3RvcnkvY3J0L3Jvb3QtY2EuY3J0MB0GA1UdDgQWBBR3M19EZViYTkOnl9i3gL1IC+3ocDAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBDQUAA4IBgQBlQ/qHtmhbFn2glu5sHffa6gXTHxshHgcZXdXrjfbtbOlib/NcdJokX0ugqeE9PrOKf1bvWOZgxFoByF4FD/QTyHnMtcAMJnuEX6dlfptVRrAhto+X79OHTvsSEDaFAC6IR1TAFyXtMLDBJptsg2EDenDK0Mc+w6Jz1AzclHHkFJGSZx0hQ76YyjEDodYohe7TIFN7n/2sOtIOEbPmWAtxNuO8AYf4AU7szYslVP0W12Y7MMwvqA66u/TbWh0RsJv+hGl1Nch74uZ6St5S4/iazM/iWjq98Wll8s8cmw4GihxRp/+rXKhu6rDgxn4LRQ7OlGwqTepwpk86Ezb/7H12B4rg5m9RH5pulhfkrX3N+phYvXPudyGl/g6kgbjpiAiyPVWmIKYRyVAK58H+siySX+zEbcj9eZbcP/IQi8g4qDr+d3fqy3Fpn81DOSxY45UvnudwFEGd4I/A3JOfho2hnO0DPdLX+wr/VVXXZQ9SZcqsCpnJP3TwPnZ041pXSiY=";

        String goodCertB64 = "MIIE1DCCAzygAwIBAgIBCjANBgkqhkiG9w0BAQsFADBNMRAwDgYDVQQDDAdnb29kLWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwHhcNMjMwNTExMDkzMDEyWhcNMjUwMzExMDkzMDEyWjBPMRIwEAYDVQQDDAlnb29kLXVzZXIxGTAXBgNVBAoMEE5vd2luYSBTb2x1dGlvbnMxETAPBgNVBAsMCFBLSS1URVNUMQswCQYDVQQGEwJMVTCCAaIwDQYJKoZIhvcNAQEBBQADggGPADCCAYoCggGBALX1sy8jRXKTIsDdv9PxSSRK8WUl1f4IUfK7eSyukPyBFOxWw4CmrRKIkT6uxyu4m5QnV5pH205Pg1Sqt02QtGYvuOrracQqcVhysiwSAssP8TTiVAPYRY7F8r+y6/ejxkNNYPWS5n71Kw2X+2iPlqqjUXvSgpt5tI42wuurNs7HusbTvkuNwyJ1nX8RLYy/oZroGmgUJ9mS3PpgOjqgT4Szgv5YWZgak4qvDlgXsrYEJJoSEYvDaz5zWEVmyMeBAWXzqD2EwuKso81l/2F0F3rB9R2tIt/Q6cZp0jvCvk49PYnpnEmNyqZ0YywXxWjejqr5cMbtPaNEjCc4gkK68n3EGFsTEoRvxWu0jbiy5RiXjoCJMXsZ2c//yPM0BKM7ggwB46WM6V0izEUzyODYB1VZuuFmcVAxqfvVCHUD3nDJDJcDw3FFK5o39lSVcMibZiI9OkQ0mS2etxSDqPer3mnw1SqzJI+07P0SLaY342T1O9Uxgj2XH3V5ev8jLDcfDwIDAQABo4G8MIG5MA4GA1UdDwEB/wQEAwIGQDCBhwYIKwYBBQUHAQEEezB5MDkGCCsGAQUFBzABhi1odHRwOi8vZHNzLm5vd2luYS5sdS9wa2ktZmFjdG9yeS9vY3NwL2dvb2QtY2EwPAYIKwYBBQUHMAKGMGh0dHA6Ly9kc3Mubm93aW5hLmx1L3BraS1mYWN0b3J5L2NydC9nb29kLWNhLmNydDAdBgNVHQ4EFgQUPb1pbH/SdKVwt/wUoHujt7QG5CcwDQYJKoZIhvcNAQELBQADggGBAB1lKWCyViP6ucFOrJiV+f5AO39i4gigbGbRccY0iGl4jPFGXHb6VcRYYYrUOAmUttS6NinPkRmjs7qaDaa7MzxZkj9DQ/2S9OcVPJS2J9R9npGrWO4zVG4rXVTVqV3o2/A6g/zSL6N6K3ne9P4s0Oz8NZQUR/CYVUUXAub4j/HeYHC+6iIegpdFKyhp+bGmnjG6m5iVEb68u3dN6fcSzfg+vPwdTNumFRTtl9mj+R/pFp8+hxZIPYmWab4ADuHPQt3u/DmK8EiqxprTG+EAVqMbCyuVwFdNMLPyXczP1jkFKqD+wFy7bdgIWwQGHVPscP2h1RzCu0Gz/RVtEestaSN3njPtcXoVg9fzIu3zaN991WBQBDt+7a6tzycb7saNR4YfaleHXe55KvXvS22uLNUL4nWAjWPtHla6eeUYaEkXDoLg5Z7kJuBp6YOQ9cvcYpHJ9XdTQFNN7hOGjKmIb8Twm/Imlmvw4CxNm3uDFr6BBJSeYgMKr0mYyrDw5wyl5g==";
        String goodCertOcspB64 = "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";

        String revokedCertB64 = "MIIE1zCCAz+gAwIBAgIBDDANBgkqhkiG9w0BAQsFADBNMRAwDgYDVQQDDAdnb29kLWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwHhcNMjMwNTExMDkzMDEyWhcNMjUwMzExMDkzMDEyWjBSMRUwEwYDVQQDDAxyZXZva2VkLXVzZXIxGTAXBgNVBAoMEE5vd2luYSBTb2x1dGlvbnMxETAPBgNVBAsMCFBLSS1URVNUMQswCQYDVQQGEwJMVTCCAaIwDQYJKoZIhvcNAQEBBQADggGPADCCAYoCggGBAMX72roFalEtc7K8CnGJXU1TkbVtaNApYNO8S4Gr7QXuDOYtWH8dy5cdoUtYpluYPHQfhTrUhuNylpwiBTsckjmj133RtQckN8yNsOsaLYGw/X0UbclxsIXo2DGxpoZznVv/q5GbcHV1L2BejTVLKIJacu4Nc/ojtGoEb+Rz7BbD1dYQYNLVZf9XNtI/3BiLEo6R2oP5nPgsTVZ6tt8yDH2eZ/TSt+c46VP87bhzN0IGbuZmPmwjrI/2WVb4JwJqNtFueGBJoYSfxHZLzJZF3JjoxG4mDLtZZVWMILL3CrYg1sUczJVSbQ+mgTI2NBe4lFdkqRwE35H3lEPJeqOSbJQMgcBgcyhLVUpSCYims5w4KmvpfSoySU+Y23AG7HjawA/haa9M0BeK/0rgoOLU9oec4cfpSshujF5ERK8m5xzt1RQ90428SmmK2rcsS2kTdQnTDtjcFgsrgRpBGyBDaO1wFyaAkemVyX+a2YE/3irodh/zJ5U1DkLvzvnp2G3TfQIDAQABo4G8MIG5MA4GA1UdDwEB/wQEAwIGQDCBhwYIKwYBBQUHAQEEezB5MDkGCCsGAQUFBzABhi1odHRwOi8vZHNzLm5vd2luYS5sdS9wa2ktZmFjdG9yeS9vY3NwL2dvb2QtY2EwPAYIKwYBBQUHMAKGMGh0dHA6Ly9kc3Mubm93aW5hLmx1L3BraS1mYWN0b3J5L2NydC9nb29kLWNhLmNydDAdBgNVHQ4EFgQUiAOsGtq3rrNrYVloJR1iTmvagdwwDQYJKoZIhvcNAQELBQADggGBAE/xlcf18nby1Bj/9mMMWRc5PiAmlwb28KAQ2CQ+J6oZz8R48LWgRJKnYafq6lVmcjNWmH11BgUh0fxkPVbPdp2Yc2XRj6siIc/ysf4gusG1Y430rnFNLzoQxi0IZkkfPEkc1cSZ1bk3CbaL/UcGB2rJkd1q+K5BecCAXiBAYTV1GWuYv2SoGcJA7yVOv0xec4eCYDmu4VSprGpKL+pLGZ4cvUriO8K3i0lPckBICQzGYnyHFOegobx55eY3Ve8FODz4NPbgqjRpQXaddEr3IxL3pfb0QxqSnOsCiJnTY14VdB1vQwYOKREqIpUi9lN9JcWQ55duAL1yqL+DaLtPw3KhZ0o5X+nBjwiyjozq5FW3nHEj2zWJ+hnuebyFTdSOhXD0QrILxhoFaLVbZfN7eWbvJnBK21Kgsm2v95AsCvzZ1SGzZDK7Gi+R4ZdCs5rdl9KUwAKNuwgPMdn9JssDvCXE5JFwQ/sXLjkuQ8sloRpQFHvrALVgJEQhzWTTHkCNNg==";
        String revokedCertOcspB64 = "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";

        CertificateVerifier certificateVerifier = new CommonCertificateVerifier();
        SignatureValidationContext validationContext = spy(new SignatureValidationContext());
        validationContext.initialize(certificateVerifier);

        CertificateToken caCert = DSSUtils.loadCertificateFromBase64EncodedString(caCertB64);
        validationContext.addCertificateTokenForVerification(caCert);
        CertificateToken goodCert = DSSUtils.loadCertificateFromBase64EncodedString(goodCertB64);
        validationContext.addCertificateTokenForVerification(goodCert);
        CertificateToken revokedCert = DSSUtils.loadCertificateFromBase64EncodedString(revokedCertB64);
        validationContext.addCertificateTokenForVerification(revokedCert);

        OfflineOCSPSource ocspSource = new ExternalResourcesOCSPSource(
                new InMemoryDocument(Utils.fromBase64(goodCertOcspB64)),
                new InMemoryDocument(Utils.fromBase64(revokedCertOcspB64)));
        validationContext.addDocumentOCSPSource(ocspSource);

        validationContext.validate();

        SignatureValidationAlerter validationAlerter = new SignatureValidationAlerter(validationContext);

        certificateVerifier.setAlertOnRevokedCertificate(new ExceptionOnStatusAlert());
        validationAlerter.assertCertificateNotRevoked(goodCert);
        Exception exception = assertThrows(AlertException.class, () -> validationAlerter.assertCertificateNotRevoked(revokedCert));
        assertTrue(exception.getMessage().contains("Revoked/Suspended certificate(s) detected."));
        verify(validationContext, times(1)).certificateNotRevoked(goodCert);
        verify(validationContext, times(1)).certificateNotRevoked(revokedCert);

        clearInvocations(validationContext);

        certificateVerifier.setAlertOnRevokedCertificate(new SilentOnStatusAlert());
        validationAlerter.assertCertificateNotRevoked(goodCert);
        validationAlerter.assertCertificateNotRevoked(revokedCert);
        verify(validationContext, times(1)).certificateNotRevoked(goodCert);
        verify(validationContext, times(1)).certificateNotRevoked(revokedCert);

        clearInvocations(validationContext);

        certificateVerifier.setAlertOnRevokedCertificate(null);
        validationAlerter.assertCertificateNotRevoked(goodCert);
        validationAlerter.assertCertificateNotRevoked(revokedCert);
        verify(validationContext, times(0)).certificateNotRevoked(goodCert);
        verify(validationContext, times(0)).certificateNotRevoked(revokedCert);
    }

    @Test
    void assertAllSignatureCertificatesNotRevokedTest() {
        String caCertB64 = "MIIE6jCCA1KgAwIBAgIBBDANBgkqhkiG9w0BAQ0FADBNMRAwDgYDVQQDDAdyb290LWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwHhcNMjMwNTExMDkzMDEyWhcNMjUwMzExMDkzMDEyWjBNMRAwDgYDVQQDDAdnb29kLWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwggGiMA0GCSqGSIb3DQEBAQUAA4IBjwAwggGKAoIBgQC1PUSrajqIL0II//nqAcWTtRUSf8sty531NCHgna+ZuZsXO0DR0vEHsZyMBvASOSZPJQHJ0mmWBHc5TcWxRlAFBwOx4J7X9QXdkaNGwzJxsHCG3VKcCY3MroaJKCJMJmlIWKBhBK4cTFeAhkJxoBZXPl4At1MIOPgVU8mTzM8BCT1A6EPz2P3FqduP4tZ5m3yBb5ARailHqKd1Pt4nvhw8ojTZPrVXfpLYzb2Ca/WqpF1acsLTXwSvXedN5H3AwFLIw8KNNf+sv+y7Izrd6+d6BEysaNX2pe2PH7h++U2cTuXJwuOkbtQ9QftSX0vj71hzGkF7eUeSIya4Ych3/KQDds1wjVusfwvoQFjdBK1Kjr/w131hLREaNXR2jmT7dP2+/AYOFe3otGqsZ0vVSpJC/FBSQFg3uslg+r3cllfHVVqnC0uJUz3Db37hhAwTyflqqh00eVUqOZmKgwLtRKEJdHLW35A8v7X2xrNwJTM9CmtJgIBUidOIIcM08KnqJgkCAwEAAaOB1DCB0TAOBgNVHQ8BAf8EBAMCAQYwQQYDVR0fBDowODA2oDSgMoYwaHR0cDovL2Rzcy5ub3dpbmEubHUvcGtpLWZhY3RvcnkvY3JsL3Jvb3QtY2EuY3JsMEwGCCsGAQUFBwEBBEAwPjA8BggrBgEFBQcwAoYwaHR0cDovL2Rzcy5ub3dpbmEubHUvcGtpLWZhY3RvcnkvY3J0L3Jvb3QtY2EuY3J0MB0GA1UdDgQWBBR3M19EZViYTkOnl9i3gL1IC+3ocDAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBDQUAA4IBgQBlQ/qHtmhbFn2glu5sHffa6gXTHxshHgcZXdXrjfbtbOlib/NcdJokX0ugqeE9PrOKf1bvWOZgxFoByF4FD/QTyHnMtcAMJnuEX6dlfptVRrAhto+X79OHTvsSEDaFAC6IR1TAFyXtMLDBJptsg2EDenDK0Mc+w6Jz1AzclHHkFJGSZx0hQ76YyjEDodYohe7TIFN7n/2sOtIOEbPmWAtxNuO8AYf4AU7szYslVP0W12Y7MMwvqA66u/TbWh0RsJv+hGl1Nch74uZ6St5S4/iazM/iWjq98Wll8s8cmw4GihxRp/+rXKhu6rDgxn4LRQ7OlGwqTepwpk86Ezb/7H12B4rg5m9RH5pulhfkrX3N+phYvXPudyGl/g6kgbjpiAiyPVWmIKYRyVAK58H+siySX+zEbcj9eZbcP/IQi8g4qDr+d3fqy3Fpn81DOSxY45UvnudwFEGd4I/A3JOfho2hnO0DPdLX+wr/VVXXZQ9SZcqsCpnJP3TwPnZ041pXSiY=";

        String goodCertB64 = "MIIE1DCCAzygAwIBAgIBCjANBgkqhkiG9w0BAQsFADBNMRAwDgYDVQQDDAdnb29kLWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwHhcNMjMwNTExMDkzMDEyWhcNMjUwMzExMDkzMDEyWjBPMRIwEAYDVQQDDAlnb29kLXVzZXIxGTAXBgNVBAoMEE5vd2luYSBTb2x1dGlvbnMxETAPBgNVBAsMCFBLSS1URVNUMQswCQYDVQQGEwJMVTCCAaIwDQYJKoZIhvcNAQEBBQADggGPADCCAYoCggGBALX1sy8jRXKTIsDdv9PxSSRK8WUl1f4IUfK7eSyukPyBFOxWw4CmrRKIkT6uxyu4m5QnV5pH205Pg1Sqt02QtGYvuOrracQqcVhysiwSAssP8TTiVAPYRY7F8r+y6/ejxkNNYPWS5n71Kw2X+2iPlqqjUXvSgpt5tI42wuurNs7HusbTvkuNwyJ1nX8RLYy/oZroGmgUJ9mS3PpgOjqgT4Szgv5YWZgak4qvDlgXsrYEJJoSEYvDaz5zWEVmyMeBAWXzqD2EwuKso81l/2F0F3rB9R2tIt/Q6cZp0jvCvk49PYnpnEmNyqZ0YywXxWjejqr5cMbtPaNEjCc4gkK68n3EGFsTEoRvxWu0jbiy5RiXjoCJMXsZ2c//yPM0BKM7ggwB46WM6V0izEUzyODYB1VZuuFmcVAxqfvVCHUD3nDJDJcDw3FFK5o39lSVcMibZiI9OkQ0mS2etxSDqPer3mnw1SqzJI+07P0SLaY342T1O9Uxgj2XH3V5ev8jLDcfDwIDAQABo4G8MIG5MA4GA1UdDwEB/wQEAwIGQDCBhwYIKwYBBQUHAQEEezB5MDkGCCsGAQUFBzABhi1odHRwOi8vZHNzLm5vd2luYS5sdS9wa2ktZmFjdG9yeS9vY3NwL2dvb2QtY2EwPAYIKwYBBQUHMAKGMGh0dHA6Ly9kc3Mubm93aW5hLmx1L3BraS1mYWN0b3J5L2NydC9nb29kLWNhLmNydDAdBgNVHQ4EFgQUPb1pbH/SdKVwt/wUoHujt7QG5CcwDQYJKoZIhvcNAQELBQADggGBAB1lKWCyViP6ucFOrJiV+f5AO39i4gigbGbRccY0iGl4jPFGXHb6VcRYYYrUOAmUttS6NinPkRmjs7qaDaa7MzxZkj9DQ/2S9OcVPJS2J9R9npGrWO4zVG4rXVTVqV3o2/A6g/zSL6N6K3ne9P4s0Oz8NZQUR/CYVUUXAub4j/HeYHC+6iIegpdFKyhp+bGmnjG6m5iVEb68u3dN6fcSzfg+vPwdTNumFRTtl9mj+R/pFp8+hxZIPYmWab4ADuHPQt3u/DmK8EiqxprTG+EAVqMbCyuVwFdNMLPyXczP1jkFKqD+wFy7bdgIWwQGHVPscP2h1RzCu0Gz/RVtEestaSN3njPtcXoVg9fzIu3zaN991WBQBDt+7a6tzycb7saNR4YfaleHXe55KvXvS22uLNUL4nWAjWPtHla6eeUYaEkXDoLg5Z7kJuBp6YOQ9cvcYpHJ9XdTQFNN7hOGjKmIb8Twm/Imlmvw4CxNm3uDFr6BBJSeYgMKr0mYyrDw5wyl5g==";
        String goodCertOcspB64 = "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";

        String revokedCertB64 = "MIIE1zCCAz+gAwIBAgIBDDANBgkqhkiG9w0BAQsFADBNMRAwDgYDVQQDDAdnb29kLWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwHhcNMjMwNTExMDkzMDEyWhcNMjUwMzExMDkzMDEyWjBSMRUwEwYDVQQDDAxyZXZva2VkLXVzZXIxGTAXBgNVBAoMEE5vd2luYSBTb2x1dGlvbnMxETAPBgNVBAsMCFBLSS1URVNUMQswCQYDVQQGEwJMVTCCAaIwDQYJKoZIhvcNAQEBBQADggGPADCCAYoCggGBAMX72roFalEtc7K8CnGJXU1TkbVtaNApYNO8S4Gr7QXuDOYtWH8dy5cdoUtYpluYPHQfhTrUhuNylpwiBTsckjmj133RtQckN8yNsOsaLYGw/X0UbclxsIXo2DGxpoZznVv/q5GbcHV1L2BejTVLKIJacu4Nc/ojtGoEb+Rz7BbD1dYQYNLVZf9XNtI/3BiLEo6R2oP5nPgsTVZ6tt8yDH2eZ/TSt+c46VP87bhzN0IGbuZmPmwjrI/2WVb4JwJqNtFueGBJoYSfxHZLzJZF3JjoxG4mDLtZZVWMILL3CrYg1sUczJVSbQ+mgTI2NBe4lFdkqRwE35H3lEPJeqOSbJQMgcBgcyhLVUpSCYims5w4KmvpfSoySU+Y23AG7HjawA/haa9M0BeK/0rgoOLU9oec4cfpSshujF5ERK8m5xzt1RQ90428SmmK2rcsS2kTdQnTDtjcFgsrgRpBGyBDaO1wFyaAkemVyX+a2YE/3irodh/zJ5U1DkLvzvnp2G3TfQIDAQABo4G8MIG5MA4GA1UdDwEB/wQEAwIGQDCBhwYIKwYBBQUHAQEEezB5MDkGCCsGAQUFBzABhi1odHRwOi8vZHNzLm5vd2luYS5sdS9wa2ktZmFjdG9yeS9vY3NwL2dvb2QtY2EwPAYIKwYBBQUHMAKGMGh0dHA6Ly9kc3Mubm93aW5hLmx1L3BraS1mYWN0b3J5L2NydC9nb29kLWNhLmNydDAdBgNVHQ4EFgQUiAOsGtq3rrNrYVloJR1iTmvagdwwDQYJKoZIhvcNAQELBQADggGBAE/xlcf18nby1Bj/9mMMWRc5PiAmlwb28KAQ2CQ+J6oZz8R48LWgRJKnYafq6lVmcjNWmH11BgUh0fxkPVbPdp2Yc2XRj6siIc/ysf4gusG1Y430rnFNLzoQxi0IZkkfPEkc1cSZ1bk3CbaL/UcGB2rJkd1q+K5BecCAXiBAYTV1GWuYv2SoGcJA7yVOv0xec4eCYDmu4VSprGpKL+pLGZ4cvUriO8K3i0lPckBICQzGYnyHFOegobx55eY3Ve8FODz4NPbgqjRpQXaddEr3IxL3pfb0QxqSnOsCiJnTY14VdB1vQwYOKREqIpUi9lN9JcWQ55duAL1yqL+DaLtPw3KhZ0o5X+nBjwiyjozq5FW3nHEj2zWJ+hnuebyFTdSOhXD0QrILxhoFaLVbZfN7eWbvJnBK21Kgsm2v95AsCvzZ1SGzZDK7Gi+R4ZdCs5rdl9KUwAKNuwgPMdn9JssDvCXE5JFwQ/sXLjkuQ8sloRpQFHvrALVgJEQhzWTTHkCNNg==";
        String revokedCertOcspB64 = "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";

        CertificateToken caCert = DSSUtils.loadCertificateFromBase64EncodedString(caCertB64);
        CertificateToken goodCert = DSSUtils.loadCertificateFromBase64EncodedString(goodCertB64);
        CertificateToken revokedCert = DSSUtils.loadCertificateFromBase64EncodedString(revokedCertB64);

        SignatureCertificateSource certificateSource = mock(SignatureCertificateSource.class);
        when(certificateSource.getCertificates()).thenReturn(Arrays.asList(caCert, goodCert));

        OfflineOCSPSource ocspSource = new ExternalResourcesOCSPSource(
                new InMemoryDocument(Utils.fromBase64(goodCertOcspB64)));

        AdvancedSignature advancedSignature = mock(AdvancedSignature.class);
        when(advancedSignature.getSigningCertificateToken()).thenReturn(goodCert);
        when(advancedSignature.getCertificateSource()).thenReturn(certificateSource);
        when(advancedSignature.getOCSPSource()).thenReturn(ocspSource);

        CertificateVerifier certificateVerifier = new CommonCertificateVerifier();
        SignatureValidationContext validationContext = spy(new SignatureValidationContext());
        validationContext.initialize(certificateVerifier);

        validationContext.addSignatureForVerification(advancedSignature);

        validationContext.validate();

        SignatureValidationAlerter validationAlerter = new SignatureValidationAlerter(validationContext);

        certificateVerifier.setAlertOnRevokedCertificate(new ExceptionOnStatusAlert());
        validationAlerter.assertAllSignatureCertificatesNotRevoked();
        verify(validationContext, times(1)).allSignatureCertificatesNotRevoked();

        clearInvocations(validationContext);

        certificateVerifier.setAlertOnRevokedCertificate(new SilentOnStatusAlert());
        validationAlerter.assertAllSignatureCertificatesNotRevoked();
        verify(validationContext, times(1)).allSignatureCertificatesNotRevoked();

        clearInvocations(validationContext);

        certificateVerifier.setAlertOnRevokedCertificate(null);
        validationAlerter.assertAllSignatureCertificatesNotRevoked();
        verify(validationContext, times(0)).allSignatureCertificatesNotRevoked();

        certificateSource = mock(SignatureCertificateSource.class);
        when(certificateSource.getCertificates()).thenReturn(Arrays.asList(caCert, revokedCert));

        ocspSource = new ExternalResourcesOCSPSource(
                new InMemoryDocument(Utils.fromBase64(revokedCertOcspB64)));

        advancedSignature = mock(AdvancedSignature.class);
        when(advancedSignature.getSigningCertificateToken()).thenReturn(revokedCert);
        when(advancedSignature.getCertificateSource()).thenReturn(certificateSource);
        when(advancedSignature.getOCSPSource()).thenReturn(ocspSource);

        validationContext = spy(new SignatureValidationContext());
        validationContext.initialize(certificateVerifier);

        validationContext.addSignatureForVerification(advancedSignature);

        validationContext.validate();

        SignatureValidationAlerter validationAlerterFailed = new SignatureValidationAlerter(validationContext);

        certificateVerifier.setAlertOnRevokedCertificate(new ExceptionOnStatusAlert());
        Exception exception = assertThrows(AlertException.class, validationAlerterFailed::assertAllSignatureCertificatesNotRevoked);
        assertTrue(exception.getMessage().contains("Revoked/Suspended certificate(s) detected."));
        verify(validationContext, times(1)).allSignatureCertificatesNotRevoked();

        clearInvocations(validationContext);

        certificateVerifier.setAlertOnRevokedCertificate(new SilentOnStatusAlert());
        validationAlerterFailed.assertAllSignatureCertificatesNotRevoked();
        verify(validationContext, times(1)).allSignatureCertificatesNotRevoked();

        clearInvocations(validationContext);

        certificateVerifier.setAlertOnRevokedCertificate(null);
        validationAlerterFailed.assertAllSignatureCertificatesNotRevoked();
        verify(validationContext, times(0)).allSignatureCertificatesNotRevoked();
    }

    @Test
    void assertAllSignatureCertificateHaveFreshRevocationDataTest() throws Exception {
        String certB64 = "MIIE8zCCA1ugAwIBAgICAfQwDQYJKoZIhvcNAQENBQAwTTEQMA4GA1UEAwwHcm9vdC1jYTEZMBcGA1UECgwQTm93aW5hIFNvbHV0aW9uczERMA8GA1UECwwIUEtJLVRFU1QxCzAJBgNVBAYTAkxVMB4XDTIzMDUxMTA5MzAxMloXDTI1MDMxMTA5MzAxMlowTjERMA8GA1UEAwwIZ29vZC10c2ExGTAXBgNVBAoMEE5vd2luYSBTb2x1dGlvbnMxETAPBgNVBAsMCFBLSS1URVNUMQswCQYDVQQGEwJMVTCCAaIwDQYJKoZIhvcNAQEBBQADggGPADCCAYoCggGBAI90c+5Vqoe1InmTeTT7NrK+7x+mDMsQ1BUjF0gFH/8i+uCKO1+H+btNG1MGqyyiPKNHMQNZNCXtZSPID06mlGXDiydP/E2iE96HdzEbBgNwwQBwOYjVH7Y2D7b/F0lEYZb41a2EyXAY5wHhRBI7AA/DNonmIt90NuVMgMEwGfpFKCLuyhkiOj0ukhaqyJoCEgNI75+6amHCAgerpnVmYfAE3XouJ6xA3egm2t469pvx5IjjaaT+VgLlmcHC/ynmvX+2XtOYFNOuCioapa9WoV3D0QYTLRbhpTPg4vgIaaPgLPsHZo+jx8Z5LYi4yeXmCouhj0wSb7wc6HcQNurBl/cKBey7olqfj+nAHWYl4mMePnE1zUHLUaFHoxFsOj1hj97LYeE5u2HI1ZoHAOyrfD4eMgizpg6mHnhB++lr4SZXZe9WPAwT6C48rKXa55qynmOMBDNmx4UwE80fx+jNbnZEU2edF4fBcyjzusAvK6WcU6evWnboe4h9VCRaU3ldcwIDAQABo4HbMIHYMA4GA1UdDwEB/wQEAwIHgDAWBgNVHSUBAf8EDDAKBggrBgEFBQcDCDBBBgNVHR8EOjA4MDagNKAyhjBodHRwOi8vZHNzLm5vd2luYS5sdS9wa2ktZmFjdG9yeS9jcmwvcm9vdC1jYS5jcmwwTAYIKwYBBQUHAQEEQDA+MDwGCCsGAQUFBzAChjBodHRwOi8vZHNzLm5vd2luYS5sdS9wa2ktZmFjdG9yeS9jcnQvcm9vdC1jYS5jcnQwHQYDVR0OBBYEFJywlyojxLwGuQ4SvBZbAqt76HO4MA0GCSqGSIb3DQEBDQUAA4IBgQA2Hh9nCuKoIiaNp8cOiehNoPhhA1U6z+28q23Yi8oPMqyGyf8NQgNaohN6v2DrYpRxErZJLPflmHNsgGcrl44SRatar78HCcxnbsB8aBEzFkkMlxcK1YcUakPYYLsA9xRxhrYMaXjbJM/FR4XJaAj1uLaf6z6OhDzdP9xvqgBCOYGeyXlp6/D2LEYTQUALp8skKrKmenGheH9/6JjVjHl4+FPHKTfymdoxAymgSqvFycnpnLUSM9M3myFp9BB0qHMMJIwM1o2D7wUV/r2fR01LTaVj3WDXbR1UHrDqEXaKEb7P7J3737IRuTw8qeAZsMrxCgYYbygg/N6mjRAg0jB2/mnqXszUI0BA1dboyuwzuadPEJcweG4b0rC5njOhH5Eq9Tfj2ixOS7H6lk8jIoHWQnQRaZijQJRMx3LKLqKKEFRtF6C7lafRGUnrWSU2/c6rcKI5Jv2Mo1OSdg5dQMotUx8NGYIFHsTVuZzMPM5l7SqZ2tpUQaWaolzzSZf3ZNo=";
        String caB64 = "MIIEVzCCAr+gAwIBAgIBATANBgkqhkiG9w0BAQ0FADBNMRAwDgYDVQQDDAdyb290LWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwHhcNMjMwNDExMDkzMDEyWhcNMjUwNDExMDkzMDEyWjBNMRAwDgYDVQQDDAdyb290LWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwggGiMA0GCSqGSIb3DQEBAQUAA4IBjwAwggGKAoIBgQChAl5g1wWKs3If1lebUeFVWxNO60uYMtUV60Sat2shEsRmnmHD1cWTyK1blEQpxKFbjxqNIoVabmBzMT3pdS8oaAuQXCx5zaVGU83NXuAELg1V3GbjmbEj1sMeE1cVEceb1GJJgCw2s0P6++opalJHC+8loihRUi2hZE6NoEHYPcjqBSXWfOzsiuCA0aEoanRwZ7UG/uqdZYShAh59Juan56fhy78cvBQn0N0njij8dk+0e7JFf+LBRORLTAGSlyepVx6MST8ZoQ51HusZnfdG/LO1DWoqsdS26y+PasiNee5xNa1FOEViWh5V9AH8kFmE3DO0TOG640ure5nA7BkQ/1+eF1BqRuaZq8HERZbm7OVViO06gTJRpxtGuZigUtUTPc03On38c0xTMO4GhvsgnTHs2T7ABJY0hKkoygtVBwhH2JUexdjfqqOL5YYaR0kHXmSXq/O2aqwPRbeD8DzOIsB2UiYeX4374iXGTj7CqRHH0+gK5g5z5z/P80Abu1sCAwEAAaNCMEAwDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBRTxpLeSvXLPe4DdyS/cuVe/jbJjTAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBDQUAA4IBgQBuMzdr4TUo6Kezeds1fmespxtWxkUTWQzSlFCnG3cpg5TLb/2aOx/2/9oiL4/CRW/sIS5jRAqd4+6cN+o7YuYYEPVMnLM2LLyyZjR7xH64PMzmlIOvxqIbXom8i2SY+7GHGnB00pDkJCDHVfZwLshCGOql4QgPbW1hz5Q81B95BJbC3AVyH6wWl5JUJ+SX16UEm9WE2Eoyqv4JNov3ZrU9tYjU3sqwu4CzE92RiBIYuaZ875pifemU97EZnWEZxOeF1jgHN5llWMeLt6ZwW/lWWFHaTjzy0HiijmAa984G5Iir3yMgyTqeDniZYGn3YjrM6vQTL0/B682BX6pADV4vLIrwcyWHUVqHUOXdvVipOkKFTrATgY2oW5VSsEJrGafDqb6MXfSjiv7ouTlY8eEslcV14Tt7KeDrSjOjzFfr5xSF+Amay9lUaDFWRGeAvMeJ1tqe1dwp+7G8Uh40bvO2KdduklD5LT671/pRbOWr5XItyu4rMfLhIM4DuHGnqck=";
        String crlB64Old = "MIICXTCBxgIBATANBgkqhkiG9w0BAQsFADBNMRAwDgYDVQQDDAdyb290LWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUXDTI0MTEyMTE1NDY0MloXDTI1MDUyMTE1NDY0MlowRTAhAgIB9xcNMjQwMzExMDkzMDEyWjAMMAoGA1UdFQQDCgEBMCACAQYXDTI0MDMxMTA5MzAxMlowDDAKBgNVHRUEAwoBATANBgkqhkiG9w0BAQsFAAOCAYEAdeWMbnGK9mudE8bVjdRI1QJDInJenSyuYsikazZN8IEv8Ll3q/AMTCl+cRRBR6n6fjYh4LaJUCGF4l/ikDKyNgf8AMS+xqdiV2ZzYlWFQndXK1QYAdm/LC5O02VPGa6mk6Jox2epklzd3NVmmms/gBQ4bU2Q3OHELP1BrevziWQnqhyxnWmA5TXFknQtvQVDKdtHCGfI1qdMVclRsWDaFbSBwvcnE5WgKyDPX6NFP5sTXxCCBb/kiu6EX9OlNOAw2J/YkO1IjkZUZfnmKIgVMuSsbXLZ1oAdbtMl8PG/pYWHE6wKBj7S9K5nQIFIE/HYr5s6/4pqcQpTytyWzvWDFITKR94z+03fE5IRniauXKZXKHScfJ+KgQuioRkT3Y/H/1ifgPwaCR60X+DhDplO4B1WC6qlu4YiZTpkQJY35qbphl4k1WFhtDma/tqL8iC9tUK3cOXqt+8mL88+9faMhAaVPczCIrqsn+Id4fA0WNhci4DADz8q1YKJyxAhliRd";
        String crlB64New = "MIICXTCBxgIBATANBgkqhkiG9w0BAQsFADBNMRAwDgYDVQQDDAdyb290LWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUXDTI0MTIxMzEwMDEwNVoXDTI1MDYxMzEwMDEwNVowRTAhAgIB9xcNMjQwMzExMDkzMDEyWjAMMAoGA1UdFQQDCgEBMCACAQYXDTI0MDMxMTA5MzAxMlowDDAKBgNVHRUEAwoBATANBgkqhkiG9w0BAQsFAAOCAYEASa/Z4GZIcinBhyK4BKgAwL1pH4X0r0ntjJLkbgdFStjeLx95qOLch3fHaN4my3bRhu/EU9NL/0CwiWNwIYllGT5Siz2KAevDbbLj+EqORot9TowjHKbvIsYmQY7FgRDxbWwYju/qHR0hEnQAW4X+CWak2vrjF3h9PMJIRKtkXi8AW9frlu1pc+M0PDALS6G+o2CjE5LBt2Wbw+udrZIfYGZKd7g7xz0X+nETAqGxgA8ocHIsYz1g1noFm3SSqThwsaB2xbk6QSYSRtffMu/rA2bLKfb74yIZy5gid228BCBv+XXrDZcQtVYCiZoEFew16PaE0dd3+a4qR3GVrSgtAsP/dSbxQrTJlwt7zrW/2TNIgxJ7ngMJVneIgOXqh9TCOzt2x5UxRzeZBDz9IS3S9SIdJYCTzXJHhPYxYSYpKG5lSat+gae4syoPLkyzGPv2YygTDAQXWNy5XSwSPjHsoNhS3YFGBcXaSoY0ef7cJpONJAP+H3L9Lynt5p8imUwh";

        String tstB64 = "MIIMpwYJKoZIhvcNAQcCoIIMmDCCDJQCAQMxDTALBglghkgBZQMEAgEwYgYLKoZIhvcNAQkQAQSgUwRRME8CAQEGBCoDBAUwITAJBgUrDgMCGgUABBR7UCw6H0jIYJriEs37Y53uOWc/XgIQE38z3BWoxzq80UKv0PlLGxgPMjAyNDEyMTMwOTU1NDBaoIIJUjCCBFcwggK/oAMCAQICAQEwDQYJKoZIhvcNAQENBQAwTTEQMA4GA1UEAwwHcm9vdC1jYTEZMBcGA1UECgwQTm93aW5hIFNvbHV0aW9uczERMA8GA1UECwwIUEtJLVRFU1QxCzAJBgNVBAYTAkxVMB4XDTIzMDQxMTA5MzAxMloXDTI1MDQxMTA5MzAxMlowTTEQMA4GA1UEAwwHcm9vdC1jYTEZMBcGA1UECgwQTm93aW5hIFNvbHV0aW9uczERMA8GA1UECwwIUEtJLVRFU1QxCzAJBgNVBAYTAkxVMIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAoQJeYNcFirNyH9ZXm1HhVVsTTutLmDLVFetEmrdrIRLEZp5hw9XFk8itW5REKcShW48ajSKFWm5gczE96XUvKGgLkFwsec2lRlPNzV7gBC4NVdxm45mxI9bDHhNXFRHHm9RiSYAsNrND+vvqKWpSRwvvJaIoUVItoWROjaBB2D3I6gUl1nzs7IrggNGhKGp0cGe1Bv7qnWWEoQIefSbmp+en4cu/HLwUJ9DdJ44o/HZPtHuyRX/iwUTkS0wBkpcnqVcejEk/GaEOdR7rGZ33RvyztQ1qKrHUtusvj2rIjXnucTWtRThFYloeVfQB/JBZhNwztEzhuuNLq3uZwOwZEP9fnhdQakbmmavBxEWW5uzlVYjtOoEyUacbRrmYoFLVEz3NNzp9/HNMUzDuBob7IJ0x7Nk+wASWNISpKMoLVQcIR9iVHsXY36qji+WGGkdJB15kl6vztmqsD0W3g/A8ziLAdlImHl+N++Ilxk4+wqkRx9PoCuYOc+c/z/NAG7tbAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUU8aS3kr1yz3uA3ckv3LlXv42yY0wDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQ0FAAOCAYEAbjM3a+E1KOins3nbNX5nrKcbVsZFE1kM0pRQpxt3KYOUy2/9mjsf9v/aIi+PwkVv7CEuY0QKnePunDfqO2LmGBD1TJyzNiy8smY0e8R+uDzM5pSDr8aiG16JvItkmPuxhxpwdNKQ5CQgx1X2cC7IQhjqpeEID21tYc+UPNQfeQSWwtwFch+sFpeSVCfkl9elBJvVhNhKMqr+CTaL92a1PbWI1N7KsLuAsxPdkYgSGLmmfO+aYn3plPexGZ1hGcTnhdY4BzeZZVjHi7emcFv5VlhR2k488tB4oo5gGvfOBuSIq98jIMk6ng54mWBp92I6zOr0Ey9PwevNgV+qQA1eLyyK8HMlh1Fah1Dl3b1YqTpChU6wE4GNqFuVUrBCaxmnw6m+jF30o4r+6Lk5WPHhLJXFdeE7eyng60ozo8xX6+cUhfgJmsvZVGgxVkRngLzHidbantXcKfuxvFIeNG7ztinXbpJQ+S0+u9f6UWzlq+VyLcruKzHy4SDOA7hxp6nJMIIE8zCCA1ugAwIBAgICAfQwDQYJKoZIhvcNAQENBQAwTTEQMA4GA1UEAwwHcm9vdC1jYTEZMBcGA1UECgwQTm93aW5hIFNvbHV0aW9uczERMA8GA1UECwwIUEtJLVRFU1QxCzAJBgNVBAYTAkxVMB4XDTIzMDUxMTA5MzAxMloXDTI1MDMxMTA5MzAxMlowTjERMA8GA1UEAwwIZ29vZC10c2ExGTAXBgNVBAoMEE5vd2luYSBTb2x1dGlvbnMxETAPBgNVBAsMCFBLSS1URVNUMQswCQYDVQQGEwJMVTCCAaIwDQYJKoZIhvcNAQEBBQADggGPADCCAYoCggGBAI90c+5Vqoe1InmTeTT7NrK+7x+mDMsQ1BUjF0gFH/8i+uCKO1+H+btNG1MGqyyiPKNHMQNZNCXtZSPID06mlGXDiydP/E2iE96HdzEbBgNwwQBwOYjVH7Y2D7b/F0lEYZb41a2EyXAY5wHhRBI7AA/DNonmIt90NuVMgMEwGfpFKCLuyhkiOj0ukhaqyJoCEgNI75+6amHCAgerpnVmYfAE3XouJ6xA3egm2t469pvx5IjjaaT+VgLlmcHC/ynmvX+2XtOYFNOuCioapa9WoV3D0QYTLRbhpTPg4vgIaaPgLPsHZo+jx8Z5LYi4yeXmCouhj0wSb7wc6HcQNurBl/cKBey7olqfj+nAHWYl4mMePnE1zUHLUaFHoxFsOj1hj97LYeE5u2HI1ZoHAOyrfD4eMgizpg6mHnhB++lr4SZXZe9WPAwT6C48rKXa55qynmOMBDNmx4UwE80fx+jNbnZEU2edF4fBcyjzusAvK6WcU6evWnboe4h9VCRaU3ldcwIDAQABo4HbMIHYMA4GA1UdDwEB/wQEAwIHgDAWBgNVHSUBAf8EDDAKBggrBgEFBQcDCDBBBgNVHR8EOjA4MDagNKAyhjBodHRwOi8vZHNzLm5vd2luYS5sdS9wa2ktZmFjdG9yeS9jcmwvcm9vdC1jYS5jcmwwTAYIKwYBBQUHAQEEQDA+MDwGCCsGAQUFBzAChjBodHRwOi8vZHNzLm5vd2luYS5sdS9wa2ktZmFjdG9yeS9jcnQvcm9vdC1jYS5jcnQwHQYDVR0OBBYEFJywlyojxLwGuQ4SvBZbAqt76HO4MA0GCSqGSIb3DQEBDQUAA4IBgQA2Hh9nCuKoIiaNp8cOiehNoPhhA1U6z+28q23Yi8oPMqyGyf8NQgNaohN6v2DrYpRxErZJLPflmHNsgGcrl44SRatar78HCcxnbsB8aBEzFkkMlxcK1YcUakPYYLsA9xRxhrYMaXjbJM/FR4XJaAj1uLaf6z6OhDzdP9xvqgBCOYGeyXlp6/D2LEYTQUALp8skKrKmenGheH9/6JjVjHl4+FPHKTfymdoxAymgSqvFycnpnLUSM9M3myFp9BB0qHMMJIwM1o2D7wUV/r2fR01LTaVj3WDXbR1UHrDqEXaKEb7P7J3737IRuTw8qeAZsMrxCgYYbygg/N6mjRAg0jB2/mnqXszUI0BA1dboyuwzuadPEJcweG4b0rC5njOhH5Eq9Tfj2ixOS7H6lk8jIoHWQnQRaZijQJRMx3LKLqKKEFRtF6C7lafRGUnrWSU2/c6rcKI5Jv2Mo1OSdg5dQMotUx8NGYIFHsTVuZzMPM5l7SqZ2tpUQaWaolzzSZf3ZNoxggLEMIICwAIBATBTME0xEDAOBgNVBAMMB3Jvb3QtY2ExGTAXBgNVBAoMEE5vd2luYSBTb2x1dGlvbnMxETAPBgNVBAsMCFBLSS1URVNUMQswCQYDVQQGEwJMVQICAfQwCwYJYIZIAWUDBAIBoIHFMBoGCSqGSIb3DQEJAzENBgsqhkiG9w0BCRABBDAcBgkqhkiG9w0BCQUxDxcNMjQxMjEzMDk1NTQwWjArBgkqhkiG9w0BCTQxHjAcMAsGCWCGSAFlAwQCAaENBgkqhkiG9w0BAQsFADArBgsqhkiG9w0BCRACDDEcMBowGDAWBBThsYvdgilDemkK67A+ldZDqmCf4DAvBgkqhkiG9w0BCQQxIgQg8SqK3zZXp8JYC1FmeAc5qk0+I9sVkqYcQGSNueLdOmMwDQYJKoZIhvcNAQELBQAEggGAR6gb5zXkqrTJXLHKiW4w2zFp4s8FAQSgztph+Hk98D9USLLw3gK6MVD3jzbG8h1MuBBBGrpNDQF7HZGDPPnC0NXrG7KiIT34ZYD4TEmu/C5vIfXmvlfA45/oXD3B0MJtn/XIqtCWhAA5+kxzcTQDtq7qocNmGrqoYiWdhsOORSMt0n4LzXrIF3TJEux1Oc2nRi3x9mr25x8EiRaZZ/vebbks044sZ8x5loidX0Dzlde4qzs2/eCoBrDywp4OqYS4qkzaIdUcOFkp09iaTdZT3XfEzFGcDCR5wsBdMWO1j8jIDUVneWrQWwcnBaN9Pnm+k2u3jb+0YGoOe9hEZkq8x+cyWA3Yc0kKSKvddXgOIJcJ4IRzllWeL8RJ3OHrRzrSJ8N0XzwcBMD3BV2m8AH7r2eCVbbAZYt48fHfhYXkDUxEE4LjBBulU8itv7Q708Md9wB3am56Q9z1zO/fsWFBbTCWdUjlJZqCiHX8HWJEFkh8Xff9n1hf298p4eE+ihg3";

        CertificateToken cert = DSSUtils.loadCertificateFromBase64EncodedString(certB64);
        CertificateToken ca = DSSUtils.loadCertificateFromBase64EncodedString(caB64);

        SignatureCertificateSource certificateSource = mock(SignatureCertificateSource.class);
        when(certificateSource.getCertificates()).thenReturn(Arrays.asList(ca, cert));

        OfflineCRLSource crlSource = new ExternalResourcesCRLSource(
                new InMemoryDocument(Utils.fromBase64(crlB64Old)));

        AdvancedSignature advancedSignature = mock(AdvancedSignature.class);
        when(advancedSignature.getSigningCertificateToken()).thenReturn(cert);
        when(advancedSignature.getCertificateSource()).thenReturn(certificateSource);
        when(advancedSignature.getCRLSource()).thenReturn(crlSource);

        CertificateVerifier certificateVerifier = new CommonCertificateVerifier();
        SignatureValidationContext validationContext = spy(new SignatureValidationContext());
        validationContext.initialize(certificateVerifier);

        validationContext.addSignatureForVerification(advancedSignature);
        validationContext.addTimestampTokenForVerification(new TimestampToken(Utils.fromBase64(tstB64), TimestampType.SIGNATURE_TIMESTAMP));

        validationContext.validate();

        SignatureValidationAlerter validationAlerter = new SignatureValidationAlerter(validationContext);

        certificateVerifier.setAlertOnNoRevocationAfterBestSignatureTime(new ExceptionOnStatusAlert());
        Exception exception = assertThrows(AlertException.class, validationAlerter::assertAllSignatureCertificateHaveFreshRevocationData);
        assertTrue(exception.getMessage().contains("Fresh revocation data is missing for one or more certificate(s)."));
        verify(validationContext, times(1)).allSignatureCertificateHaveFreshRevocationData();

        clearInvocations(validationContext);

        certificateVerifier.setAlertOnNoRevocationAfterBestSignatureTime(new SilentOnStatusAlert());
        validationAlerter.assertAllSignatureCertificateHaveFreshRevocationData();
        verify(validationContext, times(1)).allSignatureCertificateHaveFreshRevocationData();

        clearInvocations(validationContext);

        certificateVerifier.setAlertOnNoRevocationAfterBestSignatureTime(null);
        validationAlerter.assertAllSignatureCertificateHaveFreshRevocationData();
        verify(validationContext, times(0)).allSignatureCertificateHaveFreshRevocationData();

        crlSource = new ExternalResourcesCRLSource(new InMemoryDocument(Utils.fromBase64(crlB64New)));
        when(advancedSignature.getCRLSource()).thenReturn(crlSource);

        validationContext = spy(new SignatureValidationContext());
        validationContext.initialize(certificateVerifier);

        validationContext.addSignatureForVerification(advancedSignature);
        validationContext.addTimestampTokenForVerification(new TimestampToken(Utils.fromBase64(tstB64), TimestampType.SIGNATURE_TIMESTAMP));

        crlSource = new ExternalResourcesCRLSource(new InMemoryDocument(Utils.fromBase64(crlB64New)));
        validationContext.addDocumentCRLSource(crlSource);
        validationContext.validate();

        validationAlerter = new SignatureValidationAlerter(validationContext);

        certificateVerifier.setAlertOnNoRevocationAfterBestSignatureTime(new ExceptionOnStatusAlert());
        validationAlerter.assertAllSignatureCertificateHaveFreshRevocationData();
        verify(validationContext, times(1)).allSignatureCertificateHaveFreshRevocationData();

        clearInvocations(validationContext);

        certificateVerifier.setAlertOnNoRevocationAfterBestSignatureTime(new SilentOnStatusAlert());
        validationAlerter.assertAllSignatureCertificateHaveFreshRevocationData();
        verify(validationContext, times(1)).allSignatureCertificateHaveFreshRevocationData();

        clearInvocations(validationContext);

        certificateVerifier.setAlertOnNoRevocationAfterBestSignatureTime(null);
        validationAlerter.assertAllSignatureCertificateHaveFreshRevocationData();
        verify(validationContext, times(0)).allSignatureCertificateHaveFreshRevocationData();
    }

    @Test
    void assertAllSignaturesNotExpiredTest() {
        String goodCertB64 = "MIIE1DCCAzygAwIBAgIBCjANBgkqhkiG9w0BAQsFADBNMRAwDgYDVQQDDAdnb29kLWNhMRkwFwYDVQQKDBBOb3dpbmEgU29sdXRpb25zMREwDwYDVQQLDAhQS0ktVEVTVDELMAkGA1UEBhMCTFUwHhcNMjMwNTExMDkzMDEyWhcNMjUwMzExMDkzMDEyWjBPMRIwEAYDVQQDDAlnb29kLXVzZXIxGTAXBgNVBAoMEE5vd2luYSBTb2x1dGlvbnMxETAPBgNVBAsMCFBLSS1URVNUMQswCQYDVQQGEwJMVTCCAaIwDQYJKoZIhvcNAQEBBQADggGPADCCAYoCggGBALX1sy8jRXKTIsDdv9PxSSRK8WUl1f4IUfK7eSyukPyBFOxWw4CmrRKIkT6uxyu4m5QnV5pH205Pg1Sqt02QtGYvuOrracQqcVhysiwSAssP8TTiVAPYRY7F8r+y6/ejxkNNYPWS5n71Kw2X+2iPlqqjUXvSgpt5tI42wuurNs7HusbTvkuNwyJ1nX8RLYy/oZroGmgUJ9mS3PpgOjqgT4Szgv5YWZgak4qvDlgXsrYEJJoSEYvDaz5zWEVmyMeBAWXzqD2EwuKso81l/2F0F3rB9R2tIt/Q6cZp0jvCvk49PYnpnEmNyqZ0YywXxWjejqr5cMbtPaNEjCc4gkK68n3EGFsTEoRvxWu0jbiy5RiXjoCJMXsZ2c//yPM0BKM7ggwB46WM6V0izEUzyODYB1VZuuFmcVAxqfvVCHUD3nDJDJcDw3FFK5o39lSVcMibZiI9OkQ0mS2etxSDqPer3mnw1SqzJI+07P0SLaY342T1O9Uxgj2XH3V5ev8jLDcfDwIDAQABo4G8MIG5MA4GA1UdDwEB/wQEAwIGQDCBhwYIKwYBBQUHAQEEezB5MDkGCCsGAQUFBzABhi1odHRwOi8vZHNzLm5vd2luYS5sdS9wa2ktZmFjdG9yeS9vY3NwL2dvb2QtY2EwPAYIKwYBBQUHMAKGMGh0dHA6Ly9kc3Mubm93aW5hLmx1L3BraS1mYWN0b3J5L2NydC9nb29kLWNhLmNydDAdBgNVHQ4EFgQUPb1pbH/SdKVwt/wUoHujt7QG5CcwDQYJKoZIhvcNAQELBQADggGBAB1lKWCyViP6ucFOrJiV+f5AO39i4gigbGbRccY0iGl4jPFGXHb6VcRYYYrUOAmUttS6NinPkRmjs7qaDaa7MzxZkj9DQ/2S9OcVPJS2J9R9npGrWO4zVG4rXVTVqV3o2/A6g/zSL6N6K3ne9P4s0Oz8NZQUR/CYVUUXAub4j/HeYHC+6iIegpdFKyhp+bGmnjG6m5iVEb68u3dN6fcSzfg+vPwdTNumFRTtl9mj+R/pFp8+hxZIPYmWab4ADuHPQt3u/DmK8EiqxprTG+EAVqMbCyuVwFdNMLPyXczP1jkFKqD+wFy7bdgIWwQGHVPscP2h1RzCu0Gz/RVtEestaSN3njPtcXoVg9fzIu3zaN991WBQBDt+7a6tzycb7saNR4YfaleHXe55KvXvS22uLNUL4nWAjWPtHla6eeUYaEkXDoLg5Z7kJuBp6YOQ9cvcYpHJ9XdTQFNN7hOGjKmIb8Twm/Imlmvw4CxNm3uDFr6BBJSeYgMKr0mYyrDw5wyl5g==";
        CertificateToken goodCert = DSSUtils.loadCertificateFromBase64EncodedString(goodCertB64);

        AdvancedSignature advancedSignature = mock(AdvancedSignature.class);
        when(advancedSignature.getSigningCertificateToken()).thenReturn(goodCert);

        Calendar calendar = Calendar.getInstance();
        calendar.set(2024, Calendar.DECEMBER, 1);

        CertificateVerifier certificateVerifier = new CommonCertificateVerifier();
        SignatureValidationContext validationContext = spy(new SignatureValidationContext(calendar.getTime()));
        validationContext.initialize(certificateVerifier);

        validationContext.addSignatureForVerification(advancedSignature);

        validationContext.validate();

        SignatureValidationAlerter validationAlerter = new SignatureValidationAlerter(validationContext);

        certificateVerifier.setAlertOnExpiredCertificate(new ExceptionOnStatusAlert());
        validationAlerter.assertAllSignaturesNotExpired();
        verify(validationContext, times(1)).allSignaturesNotExpired();

        clearInvocations(validationContext);

        certificateVerifier.setAlertOnExpiredCertificate(new SilentOnStatusAlert());
        validationAlerter.assertAllSignaturesNotExpired();
        verify(validationContext, times(1)).allSignaturesNotExpired();

        clearInvocations(validationContext);

        certificateVerifier.setAlertOnExpiredCertificate(null);
        validationAlerter.assertAllSignaturesNotExpired();
        verify(validationContext, times(0)).allSignaturesNotExpired();

        calendar = Calendar.getInstance();
        calendar.set(2026, Calendar.DECEMBER, 1);

        validationContext = spy(new SignatureValidationContext(calendar.getTime()));
        validationContext.initialize(certificateVerifier);

        validationContext.addSignatureForVerification(advancedSignature);

        validationContext.validate();

        SignatureValidationAlerter validationAlerterFailed = new SignatureValidationAlerter(validationContext);

        certificateVerifier.setAlertOnExpiredCertificate(new ExceptionOnStatusAlert());
        Exception exception = assertThrows(AlertException.class, validationAlerterFailed::assertAllSignaturesNotExpired);
        assertTrue(exception.getMessage().contains("he signing certificate has expired and there is no POE during its validity range"));
        verify(validationContext, times(1)).allSignaturesNotExpired();

        clearInvocations(validationContext);

        certificateVerifier.setAlertOnExpiredCertificate(new SilentOnStatusAlert());
        validationAlerterFailed.assertAllSignaturesNotExpired();
        verify(validationContext, times(1)).allSignaturesNotExpired();

        clearInvocations(validationContext);

        certificateVerifier.setAlertOnExpiredCertificate(null);
        validationAlerterFailed.assertAllSignaturesNotExpired();
        verify(validationContext, times(0)).allSignaturesNotExpired();
    }

}
